/*---------------------------------*/
/* Plugin author: Robert Koritnik  */
/* Version      : 1.1 (4 Feb 2011) */
/*---------------------------------*/
(function (d) { var c = { vertical: { x: false, y: true }, horizontal: { x: true, y: false }, both: { x: true, y: true }, x: { x: true, y: false }, y: { x: false, y: true} }; var b = { duration: "fast", direction: "both" }; d.fn.extend({ scrollintoview: function (f) { f = d.extend({}, b, f); f.direction = c[typeof (f.direction) === "string" && f.direction.toLowerCase()] || c.both; var k = ""; if (f.direction.x === true) { k = "horizontal" } if (f.direction.y === true) { k = k ? "both" : "vertical" } var h = this.eq(0); var e = h.closest(":scrollable(" + k + ")"); if (e.length > 0) { e = e.eq(0); var i = { visible: (function () { var l = e.offset(); return { top: l.top, left: l.left, bottom: l.top + e[0].clientHeight, right: l.left + e[0].clientWidth, scrollX: e.scrollLeft(), scrollY: e.scrollTop()} })(), actual: (function () { var l = h.offset(); return { top: l.top, left: l.left, bottom: l.top + h.outerHeight(), right: l.left + h.outerWidth()} })() }; var j = { top: i.actual.top - i.visible.top, bottom: i.visible.bottom - i.actual.bottom, left: i.actual.left - i.visible.left, right: i.visible.right - i.actual.right }; var g = {}; if (f.direction.y === true) { if (j.top < 0) { g.scrollTop = i.visible.scrollY + j.top } if (j.top > 0 && j.bottom < 0) { g.scrollTop = i.visible.scrollY + Math.min(-j.bottom, j.top) } } if (f.direction.x === true) { if (j.left < 0) { g.scrollLeft = i.visible.scrollX + j.left } if (j.left > 0 && j.right < 0) { g.scrollLeft = i.visible.scrollX + Math.min(-j.right, j.left) } } if (!jQuery.isEmptyObject(g)) { e.animate(g, f.duration) } } return this } }); var a = { auto: true, scroll: true, visible: false, hidden: false }; d.extend(d.expr[":"], { scrollable: function (g, h, l, i) { var j = c[typeof (l[3]) === "string" && l[3].toLowerCase()] || c.both; var m = (document.defaultView && document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(g, null) : g.currentStyle); var e = { x: a[m.overflowX.toLowerCase()] || false, y: a[m.overflowY.toLowerCase()] || false }; if (!e.x && !e.y) { return false } var k = document.defaultView.getComputedStyle ? true : false; var f = { vertical: parseFloat(k ? m.borderTopWidth : d.css(g, "borderTopWidth")) + parseFloat(k ? m.borderBottomWidth : d.css(g, "borderBottomWidth")), horizontal: parseFloat(k ? m.borderLeftWidth : d.css(g, "borderLeftWidth")) + parseFloat(k ? m.borderRightWidth : d.css(g, "borderRightWidth")) }; var n = { height: { scroll: g.scrollHeight, actual: g.offsetHeight - f.vertical, client: g.clientHeight }, width: { scroll: g.scrollWidth, actual: g.offsetWidth - f.horizontal, client: g.clientWidth }, scrollableX: function () { return this.height.actual > this.height.client && this.width.scroll > this.width.client }, scrollableY: function () { return this.width.actual > this.width.client && this.height.scroll > this.height.client } }; return j.y && n.scrollableY() || j.x && n.scrollableX() } }) })(jQuery);
